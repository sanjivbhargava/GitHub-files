name: MyProject CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_ENV: production

    steps:
      # Checkout code (using the latest version)
      - name: Checkout code
        uses: actions/checkout@v3

      # Build and Test (combined)
      - name: Build and Test
        run: |
          # Assuming build.sh and test.sh are in the root of your repository
          sh ./build.sh  # Use "sh" to run shell scripts on Ubuntu
          sh ./test.sh

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the successful completion of the "build" job
    env:
      BUILD_ENV: production

    steps:
      # Ensure Build Artifacts exist (before deployment)
      - name: Ensure Build Artifacts
        run: ls -la ./build

      - name: Deploy
        run: sh ./deploy.sh  # Use "sh" to run shell scripts

  post:
    runs-on: ubuntu-latest
    needs: [build, deploy]  # This job depends on both "build" and "deploy" jobs

    steps:
      # Upload artifacts and publish test results (combined)
      - name: Archive Artifacts and Publish Test Results
        if: always()  # This step runs even if previous jobs fail
        uses: actions/upload-artifact@v2
        with:
          name: Artifacts
          path: |
            '**/target/*.jar'  # Upload all JAR files from the "target" directory
            'reports/**/*.xml'  # Upload all XML test reports from the "reports" directory (recursive)

      # Notify Result (combined success/failure message)
      - name: Notify Result
        if: always()  # This step runs even if previous jobs fail
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo 'Pipeline succeeded!'
          else
            echo 'Pipeline failed.'
          fi
